// set background or font color
@mixin colorFn($prop, $color) {
  @if $prop== "bgr" {
    background-color: $color;
  } @else if $prop== "font" {
    color: $color;
  } @else if $prop== "border" {
    border-color: $color;
  }
}

// set paddings or margins
@mixin paddMrg($arg...) {
  @if nth($arg, 1) == "padding" {
    @if length($arg) ==5 {
      padding-top: nth($arg, 2);
      padding-right: nth($arg, 3);
      padding-bottom: nth($arg, 4);
      padding-left: nth($arg, 5);
    } @else if length($arg) ==3 {
      @if nth($arg, 2) == "left" {
        padding-left: nth($arg, 3);
      } @else if nth($arg, 2) == "right" {
        padding-right: nth($arg, 3);
      } @else if nth($arg, 2) == "top" {
        padding-top: nth($arg, 3);
      } @else if nth($arg, 2) == "bottom" {
        padding-bottom: nth($arg, 3);
      } @else {
        padding: nth($arg, 2) nth($arg, 3);
      }
    } @else if length($arg) ==4 {
      padding: nth($arg, 2) nth($arg, 3) nth($arg, 4) auto;
    } @else if length($arg) ==2 {
      padding: nth($arg, 2);
    }
  } @else if nth($arg, 1) == "margin" {
    @if length($arg) ==5 {
      margin-top: nth($arg, 2);
      margin-right: nth($arg, 3);
      margin-bottom: nth($arg, 4);
      margin-left: nth($arg, 5);
    } @else if length($arg) ==3 {
      @if nth($arg, 2) == "left" {
        margin-left: nth($arg, 3);
      } @else if nth($arg, 2) == "right" {
        margin-right: nth($arg, 3);
      } @else if nth($arg, 2) == "top" {
        margin-top: nth($arg, 3);
      } @else if nth($arg, 2) == "bottom" {
        margin-bottom: nth($arg, 3);
      } @else {
        margin: nth($arg, 2) nth($arg, 3);
      }
    } @else if length($arg) ==4 {
      margin: nth($arg, 2) nth($arg, 3) nth($arg, 4) auto;
    } @else if length($arg) ==2 {
      margin: nth($arg, 2);
    }
  }
}

@function weight($weight-name) {
  @return map-get($font-weights, $weight-name);
}

@function size($size-name) {
  @return map-get($font-sizes, $size-name);
}

@function letterSize($size-name) {
  @return map-get($letter-sizes, $size-name);
}

@function translZCSS($podst) {
  @return calc(var(#{$podst}) / 1.1548 * 1rem);
}

@function setLetterFontSize($sizeF, $x) {
  @return $sizeF * $x;
}

@mixin border($top, $right, $bottom, $left, $type, $col) {
  border-top: $top $type $col;
  border-right: $right $type $col;
  border-bottom: $bottom $type $col;
  border-left: $left $type $col;
}

@mixin boxShadow($val1, $val2, $val3, $val4, $col) {
  -ms-box-shadow: $val1 $val2 $val3 $val4 $col;
  -o-box-shadow: $val1 $val2 $val3 $val4 $col;
  box-shadow: $val1 $val2 $val3 $val4 $col;
}

@mixin mediaQMaxW($arg...) {
  @if length($arg) == 2 {
    @media screen and (max-width: nth($arg,1)) and (min-width: nth($arg, 2)) {
      @content;
    }
  } @else {
    @media screen and (max-width: $arg) {
      @content;
    }
  }
}

@mixin mediaQMaxH($arg) {
  @media screen and (max-height: $arg) {
    @content;
  }
}
